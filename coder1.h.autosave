#ifndef CODER_H
#define CODER_H
#include<iostream>
#include<map>
#include"file.h"
#include"key.h"

using std::cin;
using std::cout;
using std::endl;
using std::string;

void Addit( string& code, string& line, int& i );

void ToCode( std::map<string, int>& link, string& code)
{
    code.clear();

    File Skript( "skript.txt", "out" );
    string line;
    string helpstr;
    helpstr.clear();
    line.clear();
    int i = 0;

    while ( Skript.EndFile() )
    {
        line = Skript.ReadLine();

        if( line.find( ' ' ) < line.length() )
        {
            line.copy( helpstr, 0, line.find( ' ' ) );
            line.copy( line, line.find( ' ' ), line.length() );

            if( line == STR_PUSH )
            {
                code += (char)( CODE_PUSH + 48 );
                i++;
                Addit( code, helpstr, i );
            }
            if( line == STR_POP )
            {
                code += (char)( CODE_POP + 48 );
                i++;
                Addit( code, helpstr, i );
            }
            if( line == STR_POW )
            {
                code += (char)( CODE_POW + 48 );
                i++;
                code += helpstr;
            }
        }
        else
        {
            //--------------------------------------------
            if( line[ 0 ] = ':' )
                link.insert( std::pair< string, int >( line, i ) );
            //--------------------------------------------
            if( line == STR_ADD )
            {
                code += (char)( CODE_ADD + 48 );
                i++;
            }
            if( line == STR_SUB )
            {
                code += (char)( CODE_SUB + 48 );
                i++;
            }
            if( line == STR_DIV )
            {
                code += (char)( CODE_DIV + 48 );
                i++;
            }
            if( line == STR_MULT )
            {
                code += (char)( CODE_MULT + 48 );
                i++;
            }
            if( line == STR_JE )
            {
                code += (char)( CODE_JE + 48 );
                i++;
            }
            if( line == STR_JA )
            {
                code += (char)( CODE_JA + 48 );
                i++;
            }
            if( line == STR_JAE )
            {
                code += (char)( CODE_JAE + 48 );
                i++;
            }
            if( line == STR_JB )
            {
                code += (char)( CODE_JB + 48 );
                i++;
            }
            if( line == STR_JBE )
            {
                code += (char)( CODE_JBE + 48 );
                i++;
            }
            if( line == STR_JNE )
            {
                code += (char)( CODE_JNE + 48 );
                i++;
            }
        }
    }

}

void Addit( string& code, string& line, int& i )
{
    if( line == STR_X0 )
    {
        code += (char)( CODE_X1 + 48 );
        i++;
    }
    else
    {
        if( line == STR_X1 )
        {
            code += (char)( CODE_X1 + 48 );
            i++;
        }
        else
        {
            if( line == STR_X2 )
            {
                code += (char)( CODE_X2 + 48 );
                i++;
            }
            else
            {
                code += line;
                i++;
            }
        }
    }
}

#endif // CODER_H
